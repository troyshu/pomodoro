<script>


var data_toGraph = '';

//chart defaults
var granularity = "daily";
var type = "total time";
var timeframe = "last month";
var id = <%= params[:id] %>;

//chart globals
var cur_chart_data;
var tag_status = {};

$.ajax({
  type    : 'POST',
  url     : "/users/get_data/", 
  async   : false,
  data    : { granularity: granularity, type: type, timeframe: timeframe, id:id},
  success : function(data) {
              data_toGraph = JSON.parse(data);   
              //console.log(data_toGraph);
            },  
});   



google.load("visualization", "1", {packages:["corechart"]});
google.load('visualization', '1.0', {'packages':['table']});
//console.log("data to graph:"+data_toGraph);

google.setOnLoadCallback(function(){ drawChart(data_toGraph) });
//google.setOnLoadCallback(function(){ drawTable(data_toGraph) });


function drawChart(data_toGraph) {

  cur_chart_data = data_toGraph;

  var data = google.visualization.arrayToDataTable(data_toGraph);

  var options = {
    title: 'Pomodoro history',
    chartArea: {top:30, width:"65%",height:"70%"},
    hAxis: {title: 'Date', titleTextStyle: {color: 'red'}},
    height:500
  };

  //draw chart
  var chart = new google.visualization.ColumnChart(document.getElementById('chart_div'));
  chart.draw(data, options);
  
}

function drawTable(data_toGraph) {

  var data = google.visualization.arrayToDataTable(data_toGraph);


  //draw chart
  var table = new google.visualization.Table(document.getElementById('table_div'));
  table.draw(data);
  
}
  

//tester method: ajax chart updating
function redrawChart() {
  var new_data_toGraph = '';
  //tag_status = {};  


  //get chart options from DOM
  type = $('input[name=chart-type]:radio:checked').val();
  granularity = $('input[name=chart-granularity]:radio:checked').val();
  timeframe = $('input[name=chart-timeframe]:radio:checked').val();

  //console.log(type);
  //console.log(granularity);

  $.ajax({
    type    : 'POST',
    url     : "/users/get_data/", 
    async   : false,
    data    : { granularity: granularity, type: type, timeframe: timeframe, id:id},
    success : function(data) {
                //console.log(data);
                new_data_toGraph = JSON.parse(data);   
                //console.log(data_toGraph);
              },  
  });

  drawChart(new_data_toGraph);
  //drawTable(new_data_toGraph);
  
  //redraw selected tags
  for (tag_key in tag_status) {
    if (tag_status[tag_key]==1) {
      new_filtered_data = getFilteredData(tag_key);
      new_data_toGraph = addColToDataArray(cur_chart_data,new_filtered_data);
      drawChart(new_data_toGraph);
    }
  }

}



//////////////////////tag cloud methods
function toggleTag(tag) {
  //console.log(tag);
  //console.log(cur_chart_data)
  if (tag_status[tag]==undefined) {
    tag_status[tag] = 0;
  }
  cur_tag_status = tag_status[tag];
  //console.log("before status: "+tag_status[tag]);

  //first determine if tag is currently off or on
  //if tag is currently off
  if (cur_tag_status==0) {
    tag_status[tag]=1;
    //get tag filtered data
    new_filtered_data = getFilteredData(tag);
    //add to data array
    new_data_toGraph = addColToDataArray(cur_chart_data,new_filtered_data);
    //regraph
    drawChart(new_data_toGraph);
  }
  //if tag is currently on
  if (cur_tag_status==1) {
    tag_status[tag]=0;
    //remove its column from the current data array
    new_data_toGraph = removeColFromDataArray(cur_chart_data, tag);
    //regraph
    drawChart(new_data_toGraph);
  }
}

//get filtered pomodoro data
function getFilteredData(tag) {
  var new_data_toGraph = '';

  //get chart options from DOM
  type = $('input[name=chart-type]:radio:checked').val();
  granularity = $('input[name=chart-granularity]:radio:checked').val();
  timeframe = $('input[name=chart-timeframe]:radio:checked').val();;

  //console.log(type);
  //console.log(granularity);

  $.ajax({
    type    : 'POST',
    url     : "/users/get_data/", 
    async   : false,
    data    : { granularity: granularity, type: type, timeframe: timeframe, id:id, tag_filter:tag},
    success : function(data) {
                //console.log(data);
                new_data_toGraph = JSON.parse(data);   
                //console.log(data_toGraph);
              },  
  });
  //console.log(new_data_toGraph); //diagnostic
  return new_data_toGraph;
}

//adds only column of data from second array to first data array
function addColToDataArray(data_array, data_array_toAdd) {
  if (data_array.length != data_array_toAdd.length) {
    console.log("ERROR: trying to add a tagged Pomodoro array to master data array of different list.");
    console.log(data_array);
    console.log(data_array_toAdd);
    return;
  }
  

  //first push new header
  data_array[0].push(data_array_toAdd[0][1]);

  //loop through master data array
  for (var i=1; i<data_array.length; i++) {
    //add corresponding entry to toAdd array to last element
    data_array[i].push(data_array_toAdd[i][1]);
  }
  return data_array;

}

//removes the column (given by tag name) from the data array
function removeColFromDataArray(data_array, column_name) {
  //find index of column name in headers
  var colToRemove = data_array[0].indexOf(column_name);
  if (colToRemove < 1) {
    console.log("ERROR: trying to remove invalid column.");
    console.log(colToRemove);
    return;
  }

  //remove tag from header
  removeByIndex(data_array[0],colToRemove);

  //loop through master data array
  for (var i=1; i<data_array.length; i++) {
    //add corresponding entry to toAdd array to last element
    removeByIndex(data_array[i],colToRemove);
  } 
  return data_array;

}

function removeByIndex(arrayName,arrayIndex){ 
  arrayName.splice(arrayIndex,1); 
}

</script>